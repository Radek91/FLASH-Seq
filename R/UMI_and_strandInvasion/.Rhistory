processExpressGenes(mydata = ., SAMPLESHEET = SAMPLESHEET, STAR.log = STAR.log)
# 3. RAW SCE OBJECTS
# SingleCellObject containing the read counts associated to each cell
sce <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/downsampling_featureCounts.exon.all.2021-12-05.rds.bz")
# 4. Salmon (sceToExpressedGenes)
# Downsampled to 250 or 500K raw reads
sce.sal.500K.med <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/downsampling_medianGenes_salmon.all.500000.2021-12-05.rds.bz")
sce.sal.250K.med <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/downsampling_medianGenes_salmon.all.250000.2021-12-05.rds.bz")
# 5. RESQC - READ DISTRIBUTION (getRESeQC_readDistribution)
resqc <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/ReSQC.distribution.2021-12-05.rds.bz")
# 6. RESQC - GENE BODY COVERAGES (getRESeQC_coverage)
cover <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/ReSQC.coverage.2021-12-05.rds.bz")
# 7. Estimated FS Timing (see supplementary excel file)
timing <- read_tsv("/home/vincent.hahaut/data_storage/FS_intermediate_file/FS_timing.txt")
mydata <- med.exon %>%
filter(as.numeric(as.character(P_too_short_read)) < 25) %>%
mutate(NAME = case_when(
PLATE %in% c("39") ~ "SSsc",
PLATE %in% c("32", "354", "385") ~ "SS3",
PLATE %in% c("116", "117", "250") & OLIGOT_DILUTION_FACTOR == 5 ~ "FS - 25 µL",
PLATE %in% c("29") ~ "SS2",
CELL == "PBMC" & DENATURATION == "72" & RT_LENGTH == "60" & TTH == "0" & T4 == "0" & LYSIS_VOLUME == "1" & OLIGOT_DILUTION_FACTOR == "5" & METHOD == "FASTSMART" & NACL == "0" & ENZYME %in% c("SIV", "MAXIMA") & PCR == "6" & LYSIS == "TRITON_LOW" & RT_TEMP == "50" & CYCLES > 20 & TSO == "1" ~ "FS - 5 µL\nMiniaturized"))  %>%
filter(!is.na(NAME), !PLATE %in% c("209", "203-1", "203-2")) %>%
mutate(NAME = factor(NAME, levels = c("SS2", "SS3", "FS - 25 µL", "SSsc", "FS - 5 µL\nMiniaturized")),
sce.ids = str_replace_all(paste0("X", ID, "_125000_1"), "-", ".")) %>%
filter(as.numeric(P_uniquely_mapped_reads) > 50,
as.numeric(P_too_short_read) < 25, WELL != "H12",
count_0 > 500)
mydata
mydata$NAME %>% table
mydata$NAME %>% filter(DEPTH == 125000) %>% table
mydata$NAME %>% filter(DEPTH == 125000)
mydata$NAME %>% filter(DEPTH == "125000")
sce
mydata$sce.ids
unique(mydata$sce.ids)
length(unique(mydata$sce.ids))
sce[colnames(sce) %in% unique(mydata$sce.ids)]
sce.tmp <- sce[,colnames(sce) %in% unique(mydata$sce.ids)]
dim(sce.tmp)
sce.tmp
mydata$NAME[match(mydata$sce.ids), colnames(sce)]
mydata$NAME[colnames(sce), match(mydata$sce.ids)]
mydata$NAME[match(mydata$sce.ids, colnames(sce))]
sce.tmp$GROUP <- mydata$NAME[match(mydata$sce.ids, colnames(sce))]
mydata$NAME[match(mydata$sce.ids, colnames(sce.tmp))]
mydata$NAME[match(colnames(sce.tmp), mydata$sce.ids)]
sce.tmp$GROUP <- mydata$NAME[match(colnames(sce.tmp), mydata$sce.ids)]
read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
newNames$OLD_FASTQ_ID <- str_replace_all(paste0("X", OLD_FASTQ_ID, "_125000_1"), "-", "."))
newNames$OLD_FASTQ_ID <- str_replace_all(paste0("X", OLD_FASTQ_ID, "_125000_1"), "-", ".")
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
newNames$OLD_FASTQ_ID <- str_replace_all(paste0("X", newNames$OLD_FASTQ_ID, "_125000_1"), "-", ".")
newNames$FINAL_FASTQ_ID[match(colnames(sce.tmp), newNames$OLD_FASTQ_ID)]
View(data.frame(colnames(sce.tmp), newNames$FINAL_FASTQ_ID[match(colnames(sce.tmp), newNames$OLD_FASTQ_ID)]
))
colnames(sce.tmp) <- newNames$FINAL_FASTQ_ID[match(colnames(sce.tmp), newNames$OLD_FASTQ_ID)]
write_rds(sce.tmp, "/home/vincent.hahaut/data_storage/transfer/Mendeley/human PBMCs/FS_PBMC.rds")
sce.tmp
write_rds(sce.tmp, "/home/vincent.hahaut/data_storage/transfer/Mendeley/human PBMCs/FS_PBMC_raw.rds")
ss3.ex.pred <- read_tsv("/home/vincent.hahaut/Downloads/archive/SS3_ex_azimuth.tsv")
FS.ex.pred <- read_tsv("/home/vincent.hahaut/Downloads/archive/FS_ex_azimuth.tsv")
FSmin.1.pred <- read_tsv("/home/vincent.hahaut/Downloads/archive/FSmin_donor1.tsv")
FSmin.2.pred <- read_tsv("/home/vincent.hahaut/Downloads/archive/FSmin_donor2.tsv")
ss2.ssc <- read_tsv("/home/vincent.hahaut/Downloads/archive/FSnotSS3.tsv") %>%
filter(grepl("^X29_|^X39_", cell))
predictions <- bind_rows(ss3.ex.pred,
FS.ex.pred,
FSmin.1.pred,
ss2.ssc,
FSmin.2.pred) %>%
as.data.frame()
predictions
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
newNames$OLD_FASTQ_ID <- str_replace_all(paste0("X", newNames$OLD_FASTQ_ID, "_125000_1"), "-", ".")
predictions$cell <- newNames$FINAL_FASTQ_ID[match(predictions$cell, newNames$OLD_FASTQ_ID)]
predictions$cell
sum(is.na(predictions$cell))
length(predictions$cell)
write.table(predictions, "/home/vincent.hahaut/data_storage/transfer/Mendeley/human PBMCs/FS_PBMC_celltypes.txt", sep = "\t", row.names = F, quote = F)
mydata <- med.exon %>%
mutate(NAME =
case_when(
CELL == "PBMC" & DENATURATION == "72" & RT_LENGTH == "60" & TTH == "0" & T4 == "0" & LYSIS_VOLUME == "1" & OLIGOT_DILUTION_FACTOR == "5" & METHOD == "FASTSMART" & NACL == "0" & ENZYME %in% c("SIV", "MAXIMA") & PCR == "6" & LYSIS == "TRITON_LOW" & RT_TEMP == "50" & CYCLES > 20 & TSO == "1" ~ "FS-21c",
PLATE %in% c("255", "241", "287", "290", "291") ~ "FS-LA-16c")) %>%
filter(!is.na(NAME), !grepl("diluted", ID), !PLATE %in% c("209", "203-1", "203-2"),
DEPTH == 125000) %>%
mutate(NAME = factor(as.factor(NAME), levels = c("FS-LA-16c", "FS-21c")),
sce.ids = str_replace_all(paste0("X", ID, "_125000_1"), "-", ".")) %>%
filter(as.numeric(P_uniquely_mapped_reads) > 50, as.numeric(P_too_short_read) < 25)
write.table(mydata$ID, "/home/vincent.hahaut/Desktop/IDs.txt", col.names = F, row.names = F, quote = F, append = TRUE)
# Select data
sce.tmp <- sce[,colnames(sce) %in% unique(mydata$sce.ids)]
# Add group metadata
sce.tmp$GROUP <- mydata$NAME[match(colnames(sce.tmp), mydata$sce.ids)]
# Rename to match the new fastq names
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
newNames$OLD_FASTQ_ID <- str_replace_all(paste0("X", newNames$OLD_FASTQ_ID, "_125000_1"), "-", ".")
colnames(sce.tmp) <- newNames$FINAL_FASTQ_ID[match(colnames(sce.tmp), newNames$OLD_FASTQ_ID)]
sce.tmp
colnames(sce.tmp)
sce.tmp$GROUP
# 1. Select cells of interest
mydata <- med.exon %>%
mutate(NAME =
case_when(
CELL == "PBMC" & DENATURATION == "72" & RT_LENGTH == "60" & TTH == "0" & T4 == "0" & LYSIS_VOLUME == "1" & OLIGOT_DILUTION_FACTOR == "5" & METHOD == "FASTSMART" & NACL == "0" & ENZYME %in% c("SIV", "MAXIMA") & PCR == "6" & LYSIS == "TRITON_LOW" & RT_TEMP == "50" & CYCLES > 20 & TSO == "1" ~ "FS-21c",
PLATE %in% c("255", "241", "287", "290", "291") ~ "FS-LA-16c")) %>%
filter(!is.na(NAME), !grepl("diluted", ID), !PLATE %in% c("209", "203-1", "203-2"),
DEPTH == 125000) %>%
mutate(NAME = factor(as.factor(NAME), levels = c("FS-LA-16c", "FS-21c")),
sce.ids = str_replace_all(paste0("X", ID, "_125000_1"), "-", ".")) %>%
filter(as.numeric(P_uniquely_mapped_reads) > 50, as.numeric(P_too_short_read) < 25)
write.table(mydata$ID, "/home/vincent.hahaut/Desktop/IDs.txt", col.names = F, row.names = F, quote = F, append = TRUE)
# Select data
sce.tmp <- sce[,colnames(sce) %in% unique(mydata$sce.ids)]
# Add group metadata
sce.tmp$GROUP <- mydata$NAME[match(colnames(sce.tmp), mydata$sce.ids)]
# Rename to match the new fastq names
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
newNames$OLD_FASTQ_ID <- str_replace_all(paste0("X", newNames$OLD_FASTQ_ID, "_125000_1"), "-", ".")
colnames(sce.tmp) <- newNames$FINAL_FASTQ_ID[match(colnames(sce.tmp), newNames$OLD_FASTQ_ID)]
write_rds(sce.tmp, "/home/vincent.hahaut/data_storage/transfer/Mendeley/human PBMCs/FS_PBMC_lowAmp_raw.rds")
pred <- as.data.frame(read_tsv("/home/vincent.hahaut/Downloads/archive/FS_LA_azimuth.tsv"))
pred
pred <- as.data.frame(read_tsv("/home/vincent.hahaut/Downloads/archive/FS_LA_azimuth.tsv"))
row.names(pred) <- pred$cell
pred$cell <- newNames$FINAL_FASTQ_ID[match(pred$cell, newNames$OLD_FASTQ_ID)]
pred
write.table(pred, "/home/vincent.hahaut/data_storage/transfer/Mendeley/human PBMCs/FS_PBMC_lowAmp_celltypes.txt", sep = "\t", row.names = F, quote = F)
# 1. Select cells of interest
mydata <- med.exon %>%
mutate(NAME =
case_when(
CELL == "PBMC" & DENATURATION == "72" & RT_LENGTH == "60" & TTH == "0" & T4 == "0" & LYSIS_VOLUME == "1" & OLIGOT_DILUTION_FACTOR == "5" & METHOD == "FASTSMART" & NACL == "0" & ENZYME %in% c("SIV", "MAXIMA") & PCR == "6" & LYSIS == "TRITON_LOW" & RT_TEMP == "50" & CYCLES > 20 & TSO == "1" ~ "FS-21c",
PLATE %in% c("255", "241", "287", "290", "291") ~ "FS-LA-16c")) %>%
filter(!is.na(NAME), !grepl("diluted", ID), !PLATE %in% c("209", "203-1", "203-2"),
DEPTH == 125000) %>%
mutate(NAME = factor(as.factor(NAME), levels = c("FS-LA-16c", "FS-21c")),
sce.ids = str_replace_all(paste0("X", ID, "_125000_1"), "-", ".")) %>%
filter(as.numeric(P_uniquely_mapped_reads) > 50, as.numeric(P_too_short_read) < 25)
write.table(mydata$ID, "/home/vincent.hahaut/Desktop/IDs.txt", col.names = F, row.names = F, quote = F, append = TRUE)
# Select data
sce.tmp <- sce[,colnames(sce) %in% unique(mydata$sce.ids)]
# Add group metadata
sce.tmp$GROUP <- mydata$NAME[match(colnames(sce.tmp), mydata$sce.ids)]
# Rename to match the new fastq names
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
newNames$OLD_FASTQ_ID <- str_replace_all(paste0("X", newNames$OLD_FASTQ_ID, "_125000_1"), "-", ".")
colnames(sce.tmp) <- newNames$FINAL_FASTQ_ID[match(colnames(sce.tmp), newNames$OLD_FASTQ_ID)]
write_rds(sce.tmp, "/home/vincent.hahaut/data_storage/transfer/Mendeley/human PBMCs/FS_PBMC_lowAmp_raw_125K.rds")
# Cell types
pred <- as.data.frame(read_tsv("/home/vincent.hahaut/Downloads/archive/FS_LA_azimuth.tsv"))
row.names(pred) <- pred$cell
pred$cell <- newNames$FINAL_FASTQ_ID[match(pred$cell, newNames$OLD_FASTQ_ID)]
write.table(pred, "/home/vincent.hahaut/data_storage/transfer/Mendeley/human PBMCs/FS_PBMC_lowAmp_celltypes_125K.txt", sep = "\t", row.names = F, quote = F)
# 1. Select cells of interest
mydata <- med.exon %>%
filter(as.numeric(as.character(P_too_short_read)) < 25) %>%
mutate(NAME = case_when(
PLATE %in% c("39") ~ "SSsc",
PLATE %in% c("32", "354", "385") ~ "SS3",
PLATE %in% c("116", "117", "250") & OLIGOT_DILUTION_FACTOR == 5 ~ "FS - 25 µL",
PLATE %in% c("29") ~ "SS2",
CELL == "PBMC" & DENATURATION == "72" & RT_LENGTH == "60" & TTH == "0" & T4 == "0" & LYSIS_VOLUME == "1" & OLIGOT_DILUTION_FACTOR == "5" & METHOD == "FASTSMART" & NACL == "0" & ENZYME %in% c("SIV", "MAXIMA") & PCR == "6" & LYSIS == "TRITON_LOW" & RT_TEMP == "50" & CYCLES > 20 & TSO == "1" ~ "FS - 5 µL\nMiniaturized"))  %>%
filter(!is.na(NAME), !PLATE %in% c("209", "203-1", "203-2")) %>%
mutate(NAME = factor(NAME, levels = c("SS2", "SS3", "FS - 25 µL", "SSsc", "FS - 5 µL\nMiniaturized")),
sce.ids = str_replace_all(paste0("X", ID, "_125000_1"), "-", ".")) %>%
filter(as.numeric(P_uniquely_mapped_reads) > 50,
as.numeric(P_too_short_read) < 25, WELL != "H12",
count_0 > 500)
write.table(mydata$ID, "/home/vincent.hahaut/Desktop/IDs.txt", col.names = F, row.names = F, quote = F, append = TRUE)
# Select data
sce.tmp <- sce[,colnames(sce) %in% unique(mydata$sce.ids)]
# Add group metadata
sce.tmp$GROUP <- mydata$NAME[match(colnames(sce.tmp), mydata$sce.ids)]
# Rename to match the new fastq names
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
newNames$OLD_FASTQ_ID <- str_replace_all(paste0("X", newNames$OLD_FASTQ_ID, "_125000_1"), "-", ".")
colnames(sce.tmp) <- newNames$FINAL_FASTQ_ID[match(colnames(sce.tmp), newNames$OLD_FASTQ_ID)]
write_rds(sce.tmp, "/home/vincent.hahaut/data_storage/transfer/Mendeley/human PBMCs/FS_PBMC_raw_125K.rds")
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
newNames$OLD_FASTQ_ID <- str_replace_all(paste0("X", newNames$OLD_FASTQ_ID, "_125000_1"), "-", ".")
predictions$cell <- newNames$FINAL_FASTQ_ID[match(predictions$cell, newNames$OLD_FASTQ_ID)]
write.table(predictions, "/home/vincent.hahaut/data_storage/transfer/Mendeley/human PBMCs/FS_PBMC_celltypes_125K.txt", sep = "\t", row.names = F, quote = F)
# 11. TRUST4
# 11.0. function to parse TRUST4 results
# Get the best assembly
# Select only "TRBC", "TRAC",  "TRGC",  "TRDC" chains
# Remove the allele info
# tidy the results
parseTrust4 <- function(x = NULL, DEPTH = NULL){
x %>%
mutate(cid = str_replace(pattern = "_assemble.+$", replacement = "", cid)) %>%
filter(CDR3aa != "out_of_frame") %>%
group_by(cid) %>%
arrange(desc(`#count`)) %>%
filter(row_number()==1) %>%
mutate(reads = `#count`) %>%
dplyr::select(CDR3aa, V, D, J, C, cid, cid_full_length, reads) %>%
filter(C %in% c("TRBC", "TRAC",  "TRGC",  "TRDC")) %>%
ungroup() %>%
mutate(V = str_replace(V, "\\*.+$", ""),
D = str_replace(D, "\\*.+$", ""),
J = str_replace(J, "\\*.+$", ""),
DEPTH = DEPTH,
TCR = ifelse(cid_full_length == 1, paste0(V, "_", J, "_", C, "_", CDR3aa), "")) %>%
return()
}
# 11.1 Read Trust4 results
trust.5K <- read_tsv("/home/vincent.hahaut/data_storage/TRUST4/TRUST_5K_report.tsv") %>% parseTrust4(x = ., DEPTH = 5000)
trust.10K <- read_tsv("/home/vincent.hahaut/data_storage/TRUST4/TRUST_10K_report.tsv") %>% parseTrust4(x = ., DEPTH = 10000)
trust.20K <- read_tsv("/home/vincent.hahaut/data_storage/TRUST4/TRUST_20K_report.tsv") %>% parseTrust4(x = ., DEPTH = 20000)
trust.40K <- read_tsv("/home/vincent.hahaut/data_storage/TRUST4/TRUST_40K_report.tsv") %>% parseTrust4(x = ., DEPTH = 40000)
trust.50K <- read_tsv("/home/vincent.hahaut/data_storage/TRUST4/TRUST_50K_report.tsv") %>% parseTrust4(x = ., DEPTH = 50000)
trust.75K <- read_tsv("/home/vincent.hahaut/data_storage/TRUST4/TRUST_75K_report.tsv") %>% parseTrust4(x = ., DEPTH = 75000)
trust.100K <- read_tsv("/home/vincent.hahaut/data_storage/TRUST4/TRUST_100K_report.tsv") %>% parseTrust4(x = ., DEPTH = 100000)
trust.125K <- read_tsv("/home/vincent.hahaut/data_storage/TRUST4/TRUST_125K_report.tsv") %>% parseTrust4(x = ., DEPTH = 125000)
trust4 <- list(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K,)
trust.5K
bind_rows(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K)
mydata
mydata$ID
bind_rows(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K) %>%
filter(cid %in% mydata$ID)
bind_rows(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K)
mydata$ID
unique(mydata$ID)
tcr
.
tcr
tcr
tcr <- bind_rows(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K)
tcr
tcr <- bind_rows(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K)
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
tcr$cid <- newNames$FINAL_FASTQ_ID[match(tcr$cid, newNames$OLD_FASTQ_ID)]
tcr$cid
tcr <- bind_rows(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K)
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
tcr$cid_new <- newNames$FINAL_FASTQ_ID[match(tcr$cid, newNames$OLD_FASTQ_ID)]
View(tcr)
tcr <- bind_rows(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K)
tcr$cid <- str_replace(tcr$cid, "_R1_001$", "")
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
tcr$cid_new <- newNames$FINAL_FASTQ_ID[match(tcr$cid, newNames$OLD_FASTQ_ID)]
tcr <- bind_rows(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K)
tcr$cid <- str_replace(tcr$cid, "S*_R1_001$", "")
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
tcr$cid_new <- newNames$FINAL_FASTQ_ID[match(tcr$cid, newNames$OLD_FASTQ_ID)]
tcr <- bind_rows(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K)
tcr$cid <- str_replace(tcr$cid, "S.*_R1_001$", "")
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
tcr$cid_new <- newNames$FINAL_FASTQ_ID[match(tcr$cid, newNames$OLD_FASTQ_ID)]
tcr <- bind_rows(trust.5K, trust.10K, trust.20K, trust.40K, trust.50K, trust.75K, trust.100K, trust.125K)
tcr$cid <- str_replace(tcr$cid, "_S.*_R1_001$", "")
newNames <- read_tsv("/home/vincent.hahaut/Desktop/fastqTransform.txt")
tcr$cid_new <- newNames$FINAL_FASTQ_ID[match(tcr$cid, newNames$OLD_FASTQ_ID)]
write.table(tcr, "/home/vincent.hahaut/data_storage/transfer/Mendeley/human PBMCs/FS_PBMC_TRUST4_unfiltered_downsampling.txt", sep = "\t", row.names = F, quote = F)
options(scipen=999)
# 1. LIBRARIES / FUNCTIONS
library(SummarizedExperiment)
library(tidyverse)
library(cowplot)
source("/home/vincent.hahaut/Desktop/FLASH-Seq/R/general/4_aggregate_files_functions.R")
# 2. ANNOTATIONS
gtf.path <- "/home/vincent.hahaut/data_storage/REFERENCES/hsap_fastsmart/REFERENCE/GTF/gencode.v34.primary_assembly.annotation.gtf"
gtf <- rtracklayer::import(gtf.path)
# 3. COLORS
mycolors <- as.vector(c(RColorBrewer::brewer.pal(name = "Dark2", 8),
yarrr::piratepal("basel"),
yarrr::piratepal("nemo"),
yarrr::piratepal("appletv"),
yarrr::piratepal("pony"),
yarrr::piratepal("info"),
yarrr::piratepal("decision")[-4],
yarrr::piratepal("ipod")))
methodPalette <- function(){scale_fill_manual(values = c("FS" = "#E41A1C",
"SS2" = "#377EB8",
"SS3" = "#4DAF4A",
"SSsc" = "#984EA3")
)}
#' processExpressGenes
#'
#' Merge info from number of genes per cell and STAR mapping statistics
#' First filtering of cells with shallow coverage
#' @param mydata, data.frame generated with sceToExpressedGenes
#' @param SAMPLESHEET, Global samplesheet containing all the details related to the sample preparation
#' @param STAR.log, data.frame generated with getSTARLog
processExpressGenes <- function(mydata = NULL, SAMPLESHEET = SAMPLESHEET, STAR.log = STAR.log){
depths <- c(5000,10000,20000,40000,50000,75000,100000,125000,250000,375000,500000,625000,750000,1000000,1250000,1500000)
mydata %>%
mutate(oldID = ID,
ID = str_replace(ID, "^X", ""),
DEPTH = str_extract(ID, paste0(paste0("_", depths, "_"), collapse = "|")),
DEPTH = str_replace_all(DEPTH, "_", ""),
TIMES = str_extract(ID, ".$"),
ID = str_replace(ID, paste0("_", depths, "_1", collapse = "|"), ""),
ID = str_replace_all(ID, "\\.", "-")) %>%
left_join(SAMPLESHEET, by = c("ID" = "FASTQ_ID")) %>%
left_join(STAR.log, by = "ID") %>%
filter(as.numeric(N_raw_reads) > 100000, as.numeric(N_uniquely_mapped_reads) > 50000) %>%
return()
}
#' summaryPlots
#'
#' Quick graphic summary of a sequencing condition
#' Returns information regarding
#' condition are defined in the "NAME" column
#' @param mydata, data.frame generated with sceToExpressedGenes
#' @param title, Suffix of the graph name (save)
#' @param mycols, ggplot scale_color_manual() compatible condition to color (e.g., c("CONDITION_A" = "blue"))
summaryPlots <- function(mydata = mydata, title = NULL, mycols = NULL){
# 1. Gene counts
# 1.1. Statistical test
# Shapiro.test always reject the normal distribution
# Kruskall (>2 conditions) or mann-whitney (= 2 conditions)
if(length(unique(mydata$NAME)) > 2){
if(broom::tidy(kruskal.test(mydata$count_0, mydata$NAME))$p.value < 0.05){
mytest <- FSA::dunnTest(mydata$count_0, mydata$NAME, method = "bonferroni")
mytest <- data_frame(group1 = str_split(mytest$res[,1], " - ", simplify = TRUE)[,1],
group2 =  str_split(mytest$res[,1], " - ", simplify = TRUE)[,2],
p.value = mytest$res$P.adj)
} else {
mytest <- data_frame(group1 = "A",
group2 =  "B",
p.value = 1)
}
} else {
mytest <- broom::tidy(wilcox.test(data = mydata, mydata$count_0 ~ mydata$NAME, alternative = "two.sided"))
mytest <- data_frame(group1 = levels(factor(mydata$NAME))[1],
group2 =  levels(factor(mydata$NAME))[2],
p.value = mytest$p.value)
}
# 1.2. Display the gene counts
p.gene <- ggplot() +
geom_hline(yintercept = seq(0,max(mydata$count_0)*1.1,1000), linetype = "dotted", color = "darkgrey") +
geom_violin(data = mydata, aes(y = count_0, x = NAME, fill = reorder(NAME, count_0, median))) +
geom_boxplot(data = mydata, aes(y = count_0, x = NAME, fill = reorder(NAME, count_0, median)), width=0.1) +
scale_fill_manual(values = mycols) +
scale_y_continuous(breaks = seq(0,max(mydata$count_0)*1.1,1000)) +
scale_color_brewer(palette = "Dark2") +
ylab("Detected Genes") +
xlab("") +
theme_cowplot(font_size = 28) +
theme(legend.position = "none",
legend.title = element_blank(),
panel.background = element_rect(color = "white"),
plot.background = element_rect(color = "white"),
axis.text.y = element_text(size = 22),
axis.text.x = element_text(size = 20),
axis.title = element_text(size = 24),
legend.text = element_text(size = 18)) +
geom_text(data = mydata, aes(y = 0, x = NAME, label=paste0("n = ", ..count..)), y=0, stat='count', size=6)
# 1.3. Add significance info if any < 0.05
mytest <- filter(mytest, p.value < 0.05)
if(nrow(mytest) > 0){
index <- 1:nrow(mytest)
pos.stats <- mytest %>% mutate(
y.seg = max(mydata$count_0) + max(mydata$count_0)*(1.2*index/50),
y.lab = y.seg * 1.0005,
lab = case_when(p.value < 0.05 & p.value > 0.005 ~ "*",
p.value < 0.005 & p.value > 0.0005 ~ "**",
p.value < 0.0005 ~ "***",
TRUE ~ "NA")) %>%
rowwise() %>%
mutate(lab.pos = mean(c(which(levels(factor(mydata$NAME)) == group1), which(levels(factor(mydata$NAME)) == group2)))) %>%
ungroup()
p.gene <- p.gene +
geom_segment(data = pos.stats, aes(y = y.seg, yend = y.seg, x = group1, xend = group2), size = 0.25) +
geom_text(data = pos.stats, aes(y = y.lab, label = lab, x = lab.pos), size = 6)
}
# 2. ReSQC read tag distribution
p.resqc <- filter(resqc, ID %in% mydata$ID) %>%
select(ID, UTR3_Exons, UTR5_Exons, CDS_Exons, Introns, TES_down_10kb, TSS_up_10kb, totalReadTags) %>%
mutate(Intergenic = totalReadTags - UTR3_Exons - UTR5_Exons - CDS_Exons - Introns) %>%
gather(key, val, -ID, -totalReadTags) %>%
mutate(perc = 100*val/totalReadTags) %>%
left_join(mydata %>% select(NAME, ID), by = "ID") %>%
mutate(key = case_when(key == "UTR5_Exons" ~ "5'UTR Exons",
key == "UTR3_Exons" ~ "3'UTR Exons",
key == "CDS_Exons" ~ "CDS Exons",
key == "Introns" ~ "Introns",
key == "Intergenic" ~ "Intergenic",
key == "TES_down_10kb" ~ "TES_down_10kb",
key == "TSS_up_10kb" ~ "TSS_up_10kb"),
key = factor(as.factor(key), levels = c("TES_down_10kb", "TSS_up_10kb", "3'UTR Exons", "5'UTR Exons", "Intergenic", "Introns", "CDS Exons"))) %>%
# TES / TSS info as they usually bring little info
filter(!key %in% c("TES_down_10kb", "TSS_up_10kb")) %>%
ggplot(aes(y = NAME, x = perc, fill = NAME)) +
geom_violin() +
geom_boxplot(width = 0.1) +
theme_cowplot(font_size = 28) +
facet_wrap("key", scales = "free_x", nrow = 1) +
scale_fill_manual(values = mycols) +
theme(axis.text.x = element_text(size = 20),
legend.position = "none",
strip.text = element_text(size = 24, face = "bold"),
panel.background = element_rect(color = "white"),
plot.background = element_rect(color = "white"),
rect = element_rect(size = 0.75, color = "black"),
panel.border = element_rect(size = 0.75, color = "black"),
panel.grid.major.x = element_line(linetype = "dotted", color = "darkgrey", size = 0.5),
axis.line.y.right = element_line(color = "black", linetype = "solid", size = 1)) +
ylab("") +
xlab("Read Tags (%)")
# 3. STAR mapping statistics
p.star <- select(mydata, NAME, P_uniquely_mapped_reads, P_multiple_Loci, P_too_short_read) %>%
gather(key, val, -NAME) %>%
mutate(key = case_when(key == "P_uniquely_mapped_reads" ~ "Uniquely Mapped",
key == "P_multiple_Loci" ~ "Multi-Mapped",
key == "P_too_short_read" ~ "Unmapped"),
key = factor(as.factor(key), levels = c("Uniquely Mapped", "Multi-Mapped", "Unmapped")),
FILL = paste(key, NAME)) %>%
mutate(val = as.numeric(as.character(val))) %>%
ggplot(aes(x = NAME, y = val, fill = NAME)) +
geom_violin() +
geom_boxplot(width = 0.1) +
ylab("Reads (%)") +
xlab("") +
facet_wrap("key", nrow = 1, scales = "free_y") +
theme_cowplot(font_size = 28) +
theme(legend.position = "none",
panel.background = element_rect(color = "white"),
plot.background = element_rect(color = "white"),
rect = element_rect(size = 0.75, color = "black"),
strip.text = element_text(size = 18, face = "bold"),
panel.border = element_rect(size = 0.75, color = "black"),
axis.text.x = element_text(size = 20, angle = 45, hjust = 1),
panel.grid.major.y = element_line(linetype = "dotted", color = "darkgrey", size = 0.5),
axis.line.y.right = element_line(color = "black", linetype = "solid", size = 1)) +
scale_fill_manual(values = mycols)
# 4. Combine and save the graphics
ggsave(bg = "white",
plot_grid(
plot_grid(p.gene, p.star,
nrow = 1, labels = c("a", "b"), label_size = 28, rel_widths = c(0.32, 0.67)),
p.resqc, nrow = 2, label_size = 28, labels = c("", "c")) + theme(panel.background = element_rect(color = "white"),
plot.background = element_rect(color = "white")),
filename = paste0("/home/vincent.hahaut/data_storage/FS_intermediate_file/FIGURES/", title, ".tiff"),
dpi = 300, width = 32, height = 20)
return(list(p.gene, p.star,p.resqc))
}
# 0. Load the global sample sheet
SAMPLESHEET <- read.delim("/home/vincent.hahaut/Desktop/GITHUB/IOB/SampleSheet/FS_GLOBAL_SAMPLESHEET_17112021.txt", sep = "\t")
# 0. Load the global sample sheet
SAMPLESHEET <- read.delim("/home/vincent.hahaut/Desktop/GITHUB/IOB/sampleSheet/FS_GLOBAL_SAMPLESHEET_17112021.txt", sep = "\t")
# 1. STAR - Statistics (getSTARlog)
STAR.log <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/STAR.logs.2021-12-05.rds.bz")
# 2. MEDIAN GENE COUNTS - FEATURECOUNTS - DOWNSAMPLINGS (sceToExpressedGenes)
med.exon <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/downsampling_medianGenes_featureCounts.exon.all.2021-12-05.rds.bz") %>%
processExpressGenes(mydata = ., SAMPLESHEET = SAMPLESHEET, STAR.log = STAR.log)
# 3. RAW SCE OBJECTS
# SingleCellObject containing the read counts associated to each cell
sce <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/downsampling_featureCounts.exon.all.2021-12-05.rds.bz")
# 4. Salmon (sceToExpressedGenes)
# Downsampled to 250 or 500K raw reads
sce.sal.500K.med <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/downsampling_medianGenes_salmon.all.500000.2021-12-05.rds.bz")
# 5. RESQC - READ DISTRIBUTION (getRESeQC_readDistribution)
resqc <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/ReSQC.distribution.2021-12-05.rds.bz")
# 6. RESQC - GENE BODY COVERAGES (getRESeQC_coverage)
cover <- read_rds("/home/vincent.hahaut/data_storage/FS_intermediate_file/ReSQC.coverage.2021-12-05.rds.bz")
# 7. Estimated FS Timing (see supplementary excel file)
timing <- read_tsv("/home/vincent.hahaut/data_storage/FS_intermediate_file/FS_timing.txt")
options(scipen=999)
# 1. LIBRARIES / FUNCTIONS
library(SummarizedExperiment)
library(tidyverse)
library(cowplot)
source("/home/vincent.hahaut/Desktop/FLASH-Seq/R/general/4_aggregate_files_functions.R")
# 2. ANNOTATIONS
gtf.path <- "/home/vincent.hahaut/data_storage/REFERENCES/hsap_fastsmart/REFERENCE/GTF/gencode.v34.primary_assembly.annotation.gtf"
gtf <- rtracklayer::import(gtf.path)
path <- "/home/vincent.hahaut/data_storage/210322_NB551561_0044_AHNTL2AFX2/STAR/"
paths <- list.files("/home/vincent.hahaut/data_storage/210322_NB551561_0044_AHNTL2AFX2/STAR/", full.names = TRUE, recursive = TRUE, pattern = ".feature\\.EXON\\.txt")
ID <- list.files(path)
# 1. Prepare for multi-threading
suppressPackageStartupMessages(library(doSNOW))
suppressPackageStartupMessages(library(doParallel))
cl <- makeCluster(15)
registerDoSNOW(cl)
clusterCall(cl, function() library(tidyverse))
# 2. For every read ID - available downsampling depth
# detected genes - UMI / internal / UMI+Internal (=ALL)
# Get the file path
mypaths <- data_frame()
for(i in ID){
print(i)
for(j in c("5000", "10000","20000", "40000", "50000","75000","100000", "125000", "250000")){
for(k in c("ALL", "INTERNAL", "UMI")){
path.id <- paste0("/home/vincent.hahaut/data_storage/210322_NB551561_0044_AHNTL2AFX2/STAR/", i, "/DOWNSAMPLE/", "DOWN_", j)
if(k %in% c("ALL", "INTERNAL")){
path.id <- paste0(path.id, "/FEATURECOUNTS/", i, "_", k, "_", j, ".feature.EXON.txt.gz")
} else {
path.id <- paste0(path.id, "/FEATURECOUNTS/umi.counts.", j, ".tsv.gz")
}
if(file.exists(path.id)){
mypaths <- bind_rows(mypaths,
data_frame(path = path.id,
ID = i,
type = k,
DEPTH = j))
}
}
}
}
mypaths <- mutate(mypaths, ID.final = paste0(ID, "_", DEPTH))
allreads <- lapply(mypaths$path[mypaths$type == "ALL"], function(x)
data.frame(X = as.vector(unlist(read.table(x, comment = "#", header = TRUE, sep = "\t")[,7])),
gene = read.table(x, comment = "#", header = TRUE, sep = "\t")$Geneid))
